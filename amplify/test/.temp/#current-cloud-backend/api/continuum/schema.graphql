type User
@model
@auth(
  rules: [
    # allow all authenticated users ability to create
    # allow owners ability to update and delete
    { allow: owner }
    # allow all authenticated users to read
    { allow: private, operations: [read] }
    # allow all guest users (not authenticated) to read
    { allow: public, provider: iam }
  ]
) {
  id: ID!
  name: String
  company: String
  email: String
  phone: String
  role: UserRole!
}

type Project
@model
@key(name: "byFreelancer", fields: ["freelancerID"], queryField: "projectsByFreelancer")
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  id: ID!
  freelancerID: ID!
  freelancer: User @connection(fields: ["freelancerID"])
  clientID: ID!
  client: User @connection(fields: ["clientID"])
  comments: [Comment] @connection(name: "ProjectComments", keyName: "byProject", fields: ["id"])
  comments: [Comment]
  quotes: [Quote] @connection(keyName: "byProject", fields: ["id"])
  details: String
}

type Quote
@model
@key(name: "byProject", fields: ["projectID"])
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  id: ID!
  projectID: ID!
  tasks: [Task] @connection(keyName: "byQuote", fields: ["id"])
}

type Comment
@model(subscriptions: null)
@key(name: "byProject", fields: ["commentProjectID", "createdAt"])
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  id: ID!
  createdAt: AWSDateTime!
  commentProjectID: ID!
  content: String!
  creatorID: ID!
  creator: User @connection(fields: ["creatorID"])
}

type Task
@model
@key(name: "byQuote", fields: ["quoteID"])
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  id: ID!
  quoteID: ID!
  text: String!
  completed: Boolean!
}

type S3Object {
  key: String!
  tag: String
}

type HireMeInfo
@model
@key(fields: ["freelancerID"])
@key(name: "byDomainSlug", fields: ["domainSlugID"], queryField: "hireInfoByDomainSlug")
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  freelancerID: ID!
  name: String
  title: String
  email: String!
  buttonText: String
  blurbText: String
  aboutText: String
  twitterUrl: String
  dribbbleUrl: String
  instagramUrl: String
  linkedInUrl: String
  domainSlugID: ID!
  domainSlug: DomainSlug @connection(fields: ["domainSlugID"])
  bannerImage: S3Object
  portfolioImages: [S3Object]
}

type DomainSlug
@model
@key(fields: ["slug"])
@auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  slug: ID!
  freelancerID: ID!
  hireMeInfo: HireMeInfo @connection(fields: ["freelancerID"])
}

enum UserRole {
  FREELANCER
  CLIENT
}

type Subscription {
  onCreateComment(projectID: String): Comment @aws_subscribe(mutations: "createComment")
  onUpdateComment(id: ID, projectID: String): Comment @aws_subscribe(mutations: "updateComment")
  onDeleteComment(id: ID, projectID: String): Comment @aws_subscribe(mutations: "deleteComment")
}
