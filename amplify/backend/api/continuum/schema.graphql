type User
  @model
  @key(name: "byEmail", fields: ["email"], queryField: "usersByEmail")
  @auth(
    rules: [
      # owners
      { allow: owner }
      # all authenticated users
      { allow: private, operations: [create, read, update] }
      # all guest users
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  id: ID!
  name: String
  title: String
  company: String
  email: String
  avatar: S3Object
  phone: String
  address: String
  taxID: String
  signedOutAuthToken: String
  role: UserRole!
  stripeAccountID: String
  hireMeInfo: HireMeInfo @connection(fields: ["id"])
}

type ProjectClient
  @model
  @key(name: "byProject", fields: ["projectID"])
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  id: ID!
  clientID: ID!
  user: User @connection(fields: ["clientID"])
  projectID: ID!
  isInitialContact: Boolean
}

type ProjectFreelancer
  @model
  @key(name: "byProject", fields: ["projectID"])
  @key(name: "byFreelancer", fields: ["freelancerID", "createdAt"], queryField: "projectsByFreelancer")
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime!
  freelancerID: ID!
  pendingEmail: String
  user: User @connection(fields: ["freelancerID"])
  projectID: ID!
  project: Project @connection(fields: ["projectID"])
  isInitialContact: Boolean
  notes: [Note!]! @connection(keyName: "byProjectFreelancer", fields: ["id"])
}

type Project
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [create, read] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime!
  owner: String!
  comments: [Comment] @connection(keyName: "byProject", fields: ["id"])
  quotes: [Quote] @connection(keyName: "byProject", fields: ["id"])
  details: String
  title: String
  clients: [ProjectClient!]! @connection(keyName: "byProject", fields: ["id"])
  freelancers: [ProjectFreelancer!]! @connection(keyName: "byProject", fields: ["id"])
  company: String
  assets: [ProjectAssets] @connection(keyName: "byProject", fields: ["id"])
}

type ProjectAssets
  @model
  @key(name: "byProject", fields: ["projectID", "createdAt"])
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [create, read] }
    ]
  ) {
  id: ID!
  asset: S3Object
  url: String
  createdAt: AWSDateTime!
  projectID: ID!
  fileName: String
}

type Quote
  @model
  @key(name: "byProject", fields: ["projectID"])
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
      { allow: public, provider: iam }
    ]
  ) {
  id: ID!
  projectID: ID!
  tasks: [Task] @connection(keyName: "byQuote", fields: ["id"])
  billableHours: Int
  chargePerHour: Int
  totalPrice: Int # usd cents
  billingType: QuoteBillingType!
  status: QuoteStatus
  statusLastChangedAt: AWSDateTime
  payments: [QuotePayment] @connection(keyName: "byQuote", fields: ["id"])
}

type Comment
  @model
  @key(name: "byProject", fields: ["projectID", "createdAt"])
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  id: ID!
  createdAt: AWSDateTime!
  projectID: ID!
  content: String!
  creatorID: ID!
  creator: User @connection(fields: ["creatorID"])
  includedResourceType: CommentResourceType
  includedResourceID: ID
}

enum CommentResourceType {
  QUOTE
}

type Task
  @model
  @key(name: "byQuote", fields: ["quoteID"])
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [create, read, update, delete] }
      { allow: public, provider: iam }
    ]
  ) {
  id: ID!
  quoteID: ID!
  text: String!
  completed: Boolean!
}

type S3Object {
  key: String!
  tag: String
}

type HireMeInfo
  @model
  @key(fields: ["freelancerID"])
  @key(name: "byDomainSlug", fields: ["domainSlugID"], queryField: "hireInfoByDomainSlug")
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  freelancerID: ID!
  freelancer: User @connection(fields: ["freelancerID"])
  buttonText: String
  blurbText: String
  aboutText: String
  twitterUrl: String
  dribbbleUrl: String
  instagramUrl: String
  linkedInUrl: String
  domainSlugID: ID!
  domainSlug: DomainSlug @connection(fields: ["domainSlugID"])
  bannerImage: S3Object
  portfolioImages: [S3Object]
}

type DomainSlug
  @model
  @key(fields: ["slug"])
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }, { allow: public, provider: iam }]) {
  slug: ID!
  freelancerID: ID!
  hireMeInfo: HireMeInfo @connection(fields: ["freelancerID"])
}

type Note
  @model
  @key(name: "byProjectFreelancer", fields: ["projectFreelancerID"])
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [create, read, update] }
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  projectFreelancerID: ID!
  title: String!
  content: String
}

type QuotePayment
  @model
  @key(name: "byQuote", fields: ["quoteID"])
  @auth(
    rules: [
      { allow: owner, operations: [create, read] }
      { allow: public, provider: iam, operations: [create, read] }
      { allow: private, operations: [create, read] }
    ]
  ) {
  fromUserID: ID!
  toUserID: ID!
  quoteID: ID!
  amount: Int!
}

enum QuoteStatus {
  IDLE
  ACCEPTED
  DECLINE
}

enum UserRole {
  FREELANCER
  CLIENT
}

enum QuoteBillingType {
  HOURLY
  TOTAL
}
