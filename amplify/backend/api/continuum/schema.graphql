type User @model @auth (
    rules: [
      # allow all authenticated users ability to create
      # allow owners ability to update and delete
      { allow: owner },

      # allow all authenticated users to read
      { allow: private, operations: [read] },

      # allow all guest users (not authenticated) to read
      { allow: public, provider: iam }
    ]
  ) {
  id: ID!
  projects: [Project] @connection(keyName: "byFreelancer", fields: ["id"])
  name: String!
  role: UserRole!
}

type Project @model @key(name: "byFreelancer", fields: ["freelancerID"], queryField: "projectsByFreelancer")  @auth (
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: public, provider: iam }
    ]
  ){
  id: ID!
  freelancerID: ID!
  freelancer: User @connection(fields: ["freelancerID"])
  clientID: ID!
  client: User @connection(fields: ["clientID"])
  comments: [Comment] @connection(keyName: "byProject", fields: ["id"])
  quotes: [Quote] @connection(keyName: "byProject", fields: ["id"])
  initialContact: InitialContact
}

type InitialContact {
  message: String!
}

type Quote @model @key(name: "byProject", fields: ["projectID"])  @auth (
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: public, provider: iam }
    ]
  ){
  id: ID!
  projectID: ID!
  tasks: [Task] @connection(keyName: "byQuote", fields:["id"])
}

type Comment @model @key(name: "byProject", fields: ["projectID"])  @auth (
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: public, provider: iam }
    ]
  ){
  id: ID!
  projectID: ID!
  content: String!
  creatorID: ID!
  creator: User! @connection(fields: ["creatorID"])
}

type Task @model @key(name: "byQuote", fields: ["quoteID"])  @auth (
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: public, provider: iam }
    ]
  ){
  id: ID!
  quoteID: ID!
  text: String!
  completed: Boolean!
}

type S3Object {
  key: String!
  tag: String
}

type HireMeInfo @model @key(fields: ["freelancerID"]) @auth (
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: public, provider: iam }
    ]
  ) {
  freelancerID: ID!
  name: String
  title: String
  buttonText: String
  blurbText: String
  aboutText: String
  bannerImage: S3Object
  portfolioImages: [S3Object]
}

enum UserRole {
  FREELANCER
  CLIENT
}